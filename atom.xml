<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>指尖上的律动</title>
  
  <subtitle>Always on the way of programming.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.mikewoo.top/"/>
  <updated>2019-01-30T02:42:48.062Z</updated>
  <id>http://www.mikewoo.top/</id>
  
  <author>
    <name>明月天涯</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>深入学习Kafka-初始Kafka</title>
    <link href="http://www.mikewoo.top/2019/01/30/%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0Kafka-%E5%88%9D%E5%A7%8BKafka/"/>
    <id>http://www.mikewoo.top/2019/01/30/深入学习Kafka-初始Kafka/</id>
    <published>2019-01-30T02:38:19.000Z</published>
    <updated>2019-01-30T02:42:48.062Z</updated>
    
    <content type="html"><![CDATA[<h1 id="初识Kafka"><a href="#初识Kafka" class="headerlink" title="初识Kafka"></a>初识Kafka</h1><p>数据为企业的发展提供动力。我们从数据中获取信息，对数据进行分析处理，生成我们关心的数据，这些数据对业务提供数据支撑，产生更多的数据。我们需要把数据从源头移动到可以对它们进行分析处理的地方，然后把分析处理的结果应用到实际场景中，这样就能够确切的知道这些数据能够给我们带来哪些有价值的信息。</p><a id="more"></a><h2 id="1-1-发布订阅系统"><a href="#1-1-发布订阅系统" class="headerlink" title="1.1 发布订阅系统"></a>1.1 发布订阅系统</h2><p>在普通的数据传递过程中，数据直接由发送方通过某种途径（如网络传输）传递给接收方，而在订阅发布系统中，数据的发送者不会直接把消息（也就是数据）发送给接收者，而是将数据发往发布消息的中心点（broker）。发布者可以对消息进行分类，接收者可以根据订阅它们，以便接收自己感兴趣的特定类型的消息。</p><p><strong>好处：</strong></p><ol><li>将消息的发送者与接收者进行解耦，降低系统架构的复杂度；</li><li>通过将消息以通用的类型，发送到集中的中心点，可以实现数据的复用。</li></ol><h2 id="1-2-Kafka介绍"><a href="#1-2-Kafka介绍" class="headerlink" title="1.2 Kafka介绍"></a>1.2 Kafka介绍</h2><p>Kafka是一款分布式流平台（distributed streaming platform）。同其他消息系统一样，具备消息订阅和发布功能，Kafka的数据是按照一定顺序持久化保存，可以实现按需读取。此外，Kafka的数据分布在整个系统中，具备数据按故障保护和性能伸缩的能力。</p><h3 id="1-2-1-消息和批次"><a href="#1-2-1-消息和批次" class="headerlink" title="1.2.1 消息和批次"></a>1.2.1 消息和批次</h3><p>Kafka的数据单元被称为<strong>消息</strong>。消息类似与关系型数据库中的一条记录。消息由字节数据组成，所以对于Kafka来说，消息中的数据没有特定的格式和含义。消息可以有一个可选的元数据，称为<strong>键</strong>，键也是一个字节数组，与消息一样，对于Kafka来说也没有特定的格式和含义。通过键可以实现消息以一种可控的方式写入不同的分区。例如通过键的一致性散列值对消息所属主题中分区数进行取模，为消息选取分区，就可以实现相同键的消息总是写入到相同的分区中。</p><p><strong>批次</strong>就是一组消息，这些消息属于同一个主题。实际场景中，通过消息分批次写入Kafka，减少网络开销，可以提高消息写入的效率，提升系统的吞吐量。但是消息写入的时间延迟就会增加。所以需要在时间延迟和吞吐量之间做出权衡，批次越大，单位时间内处理的消息就越多，单个消息的传输时间就越长。</p><h3 id="1-2-2-模式"><a href="#1-2-2-模式" class="headerlink" title="1.2.2 模式"></a>1.2.2 模式</h3><p><strong>模式</strong>就是消息的定义格式。对于Kafka来说，消息不过是字节数组，通过统一的模式来定义消息的格式，不仅让消息便于理解，还可以消除消息读写操作之间的耦合性。</p><h3 id="1-2-3-主题和分区"><a href="#1-2-3-主题和分区" class="headerlink" title="1.2.3 主题和分区"></a>1.2.3 主题和分区</h3><p>Kafka中的消息通过<strong>主题</strong>进行分类，主题就类似于关系型数据库中的表。主题可以被分为若干个<strong>分区</strong>，一个分区就是一个提交日志。消息以追加的方式写入分区，然后以先进先出的顺序读取。如下图所示，主题包含3个分区，消息被追加写入每个分区的尾部。</p><div align="center"><img src="https://mikewoo-blog.oss-cn-beijing.aliyuncs.com/kafka-guide/01_kafka_topic_anatomy.png" alt="Kafka主题分区示意图"></div><p>请<strong>注意</strong>，一个主题如果包含多个分区，无法在整个主题范围内保证消息的顺序，但可以保证消息在单个分区内的顺序。</p><p>Kafka通过分区来实现数据冗余和伸缩性。分区可以分布在不同的服务器上，一个主题可以横跨多个服务器，可以提供比单个服务器更强大的性能。</p><h3 id="1-2-4-生产者和消费者"><a href="#1-2-4-生产者和消费者" class="headerlink" title="1.2.4 生产者和消费者"></a>1.2.4 生产者和消费者</h3><p>Kafka的客户端，也就是Kafka系统的用户，分为两种基本类型：生产者和消费者。</p><p><strong>生产者</strong>用于创建消息。一般情况下，一个消息会被发布到一个特定的主题上。生产者在默认情况下把消息均衡地发布到主题所有的分区上，不过，在某些情况下，生产者通过使用自定义的区分其，可以根据不同的业务规则，把消息写入到指定的分区。</p><p><strong>消费者</strong>用于读取消息。消费者订阅一个或多个主题，并按照消息写入的顺序读取它们。消费者通过检查消息的偏移量来检查已经读取过的消息。<strong>偏移量</strong>是另一种元数据，是一个不断递增的整数值，在创建消息时，Kafka将其添加到消息中。在一个特定分区中，每个消息的偏移量都是唯一的，消费者会将其最后读取到的每个分区消息偏移量保存在Zookeeper中，这样即使消费者关闭，它的读取状态也不会丢失。</p><p>多个消费者一起组成一个<strong>消费组</strong>。对于一个消费组来说，会有一个或者多个消费者共同消费某一个主题上的消息，消费组能保证同一主题中的每个分区只会被一个消费者消费。通过这种方式，消费者可以消费包含大量消息的主题。而且，在消费组中，如果某一个消费者失败，组里的其它消费者可以接管失败消费者的工作。如下图所示，两个消费组A和B都由多个消费者组成，组中的每个消费者消费不同的分区，每个分区只会被同一个组中的某一个消费者消费，如P0被Group A中的C1消费，就不会同时被C2消费；但是可以被不同组中的消费者同时消费，如P0同时被Group A中的C1和Group B中的C3消费。</p><div align="center"><img src="https://mikewoo-blog.oss-cn-beijing.aliyuncs.com/kafka-guide/01_kafka_consumer_groups.png" alt="Kafka消息组消费不同主题示意图"></div><h3 id="1-2-5-broker和集群"><a href="#1-2-5-broker和集群" class="headerlink" title="1.2.5 broker和集群"></a>1.2.5 broker和集群</h3><p>一个独立的Kafka服务器被称为<strong>broker</strong>。broker接收来自生产者的消息，为消息设置偏移量，并提交消息到磁盘保存。broker为消息消费者提供服务，对读取分区的请求做出响应，返回已提交到磁盘上的消息。</p><p>broker是<strong>集群</strong>的组成部分。每个集群都有一个broker充当集群控制器的角色，负责集群的管理工作，如将分区分配给broker、监控broker状态。</p><p>在集群中，一个分区从属于一个broker，该broker被称为分区的<strong>Leader</strong>。可以通过分区复制将分区分配给多个broker，如下图所示，实现消息冗余。</p><div align="center"><img src="https://mikewoo-blog.oss-cn-beijing.aliyuncs.com/kafka-guide/01_kafka_replication_of_partitions.png" alt="Kafka分区复制示意图"></div><p>如果一个 broker失效，其他broker可以接管其工作，相关的生产者和消费者需要重新连到新的broker，才能继续收发消息。</p><p>Kafka允许消息<strong>持久化保留</strong>一定的时间。默认的消息保留策略是：要么保留指定的时间期限（比如7天），要么保留到消息文件达到一定大小的字节限制，消息达到这些限制时，旧消息就会过期被删除。</p><h3 id="1-2-6-多集群"><a href="#1-2-6-多集群" class="headerlink" title="1.2.6 多集群"></a>1.2.6 多集群</h3><p>Kafka集群部署可以实现<strong>多集群</strong>，集群之间需要通过消息复制实现数据同步。不过，Kafka的消息复制机制只能在单个集群中进行，不能在多个集群之间进行。</p><p>Kafka提供了一个工具<strong>MirrorMaker</strong>，可以用来实现集群之间的消息复制。MirrorMaker的核心组件是一个生产者和一个消费者，两者之间通过一个队列相连。如下图所示，消费者从一个集群中读取消息，生产者把消息发送给另一个集群。</p><div align="center"><img src="https://mikewoo-blog.oss-cn-beijing.aliyuncs.com/kafka-guide/01_kafka_multiple_cluster_replication_of_partitions.png" alt="Kafka多集群消息复制示意图"></div><h2 id="1-3-为什么选择Kafka"><a href="#1-3-为什么选择Kafka" class="headerlink" title="1.3 为什么选择Kafka"></a>1.3 为什么选择Kafka</h2><p>说了很多kafka原理相关的东西，聊一聊我们为什么会选择kafka，kafka有哪些特性呢？</p><h3 id="1-3-1-多个生产者"><a href="#1-3-1-多个生产者" class="headerlink" title="1.3.1 多个生产者"></a>1.3.1 多个生产者</h3><p>Kafka支持多个生产者，不管是单个主题还是多个主题，都支持多个生产者往主题中写入消息。</p><h3 id="1-3-2-多个消费者"><a href="#1-3-2-多个消费者" class="headerlink" title="1.3.2 多个消费者"></a>1.3.2 多个消费者</h3><p>除了支持多个生产者之外，Kafka也支持多个消费者从一个单独的消息流上读取数据，而且消费者之间互不影响。另外，多个消费者可以组成一个消费者组，并且可以保证整个群组对单个消息只会消费一次。</p><h3 id="1-3-3-消息持久化"><a href="#1-3-3-消息持久化" class="headerlink" title="1.3.3 消息持久化"></a>1.3.3 消息持久化</h3><p>Kafka允许消费者非实时地读取消息。Kafka根据保留规则，可以将消息持久化到磁盘，可以保证数据不会丢失。在消费者处理速度慢或者流量高峰时如果无法及时消费消息，也不会造成消息丢失或者阻塞生产者服务。即使生产者被关闭，消息也还是继续存储在Kafka中，再次启动消费者还可以从上次中断的位置继续处理消息。</p><h3 id="1-3-4-伸缩性"><a href="#1-3-4-伸缩性" class="headerlink" title="1.3.4 伸缩性"></a>1.3.4 伸缩性</h3><p>Kafka集群中broker具备灵活的伸缩性，broker可以轻松的进行扩展而不影响集群的整体可用性。一个包含多个broker的集群，即使个别broker节点宕机，仍然可以持续的对外提供服务。</p><h3 id="1-3-5-高性能"><a href="#1-3-5-高性能" class="headerlink" title="1.3.5 高性能"></a>1.3.5 高性能</h3><p>Kafka从设计上就是一个高性能的流式处理平台，根据特定的硬件及其性能特征，单个broker可以轻松处理数千个分区以及每秒百万级的消息量。通过横向扩展生产者、消费者和broker，Kafka可以轻松处理巨大的消息流，同时还能保证亚秒级的消息延迟。</p><h2 id="1-4-使用场景"><a href="#1-4-使用场景" class="headerlink" title="1.4 使用场景"></a>1.4 使用场景</h2><p>Kafka在实际中使用非常广泛，主要集中在以下几个场景：</p><h3 id="1-4-1-活动追踪"><a href="#1-4-1-活动追踪" class="headerlink" title="1.4.1 活动追踪"></a>1.4.1 活动追踪</h3><p>活动追踪是Kafka最初设计时主要应用的场景。网站用户和前端应用程序发生交互时，前端应用生成用户活动相关的消息，将其发布到一个或者多个主题上，由后端应用负责消费处理，这样可以获取用户活动数据，为其他引用提供数据支撑。</p><h3 id="1-4-2-传递消息"><a href="#1-4-2-传递消息" class="headerlink" title="1.4.2 传递消息"></a>1.4.2 传递消息</h3><p>Kafka的另一个基本用途就是传递消息。这种场景Kafka就充当一个常规的消息系统，其分区、副本以及容错机制，可以为消息传递提供良好的性能保证，另外多生产者和消费者以及消息持久化特定可以实现应用解耦以及流量削锋。</p><h3 id="1-4-3-度量指标和提交日志"><a href="#1-4-3-度量指标和提交日志" class="headerlink" title="1.4.3 度量指标和提交日志"></a>1.4.3 度量指标和提交日志</h3><p>Kafka可以用于收集应用程序和系统度量指标以及日志。应用程序可以定期把度量指标发布到Kafka主题上，监控系统就可以读取到这些信息实现监控和报警功能。</p><h3 id="1-4-4-提交日志"><a href="#1-4-4-提交日志" class="headerlink" title="1.4.4 提交日志"></a>1.4.4 提交日志</h3><p>Kafka的基本概念就是来源于提交日志。我们可以把数据的持久化更新发布到Kafka中，应用程序通过监听Kafka主题来接收数据的实时更新，就可以实现多个系统之间的数据实时同步。</p><h3 id="1-4-5-流处理"><a href="#1-4-5-流处理" class="headerlink" title="1.4.5 流处理"></a>1.4.5 流处理</h3><p>Kafka Streams可以实现类似Spark streaming和Apache Storm等强大的流处理功能，通过流式处理，可以有效的处理消息分区，或者对来自不同数据源的消息进行转换。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;初识Kafka&quot;&gt;&lt;a href=&quot;#初识Kafka&quot; class=&quot;headerlink&quot; title=&quot;初识Kafka&quot;&gt;&lt;/a&gt;初识Kafka&lt;/h1&gt;&lt;p&gt;数据为企业的发展提供动力。我们从数据中获取信息，对数据进行分析处理，生成我们关心的数据，这些数据对业务提供数据支撑，产生更多的数据。我们需要把数据从源头移动到可以对它们进行分析处理的地方，然后把分析处理的结果应用到实际场景中，这样就能够确切的知道这些数据能够给我们带来哪些有价值的信息。&lt;/p&gt;
    
    </summary>
    
      <category term="深入学习Kafka" scheme="http://www.mikewoo.top/categories/%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0Kafka/"/>
    
    
      <category term="Kafka" scheme="http://www.mikewoo.top/tags/Kafka/"/>
    
  </entry>
  
  <entry>
    <title>深入学习Netty-Socket服务器与客户端实现</title>
    <link href="http://www.mikewoo.top/2018/11/14/%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0Netty-Socket%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8E%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AE%9E%E7%8E%B0/"/>
    <id>http://www.mikewoo.top/2018/11/14/深入学习Netty-Socket服务器与客户端实现/</id>
    <published>2018-11-14T05:27:09.000Z</published>
    <updated>2018-11-14T07:53:30.089Z</updated>
    
    <content type="html"><![CDATA[<p>在了解了Netty是什么以及它的基本组件之后，我们接下来看看Netty在实际工作中如何应用。本节主要关注基于Netty如何实现Socket服务器和客户端。</p><a id="more"></a><h1 id="Netty在实际工作中的应用"><a href="#Netty在实际工作中的应用" class="headerlink" title="Netty在实际工作中的应用"></a>Netty在实际工作中的应用</h1><p>在互联网行业，随着网站规模的不断扩大，系统并发访问量也越来越高，传统基于Tomcat等Web容器的垂直架构已经无法满足需求，需要拆分应用进行服务化，以提高开发和维护效率。从组网情况看，垂直的架构拆分之后，系统采用分布式部署，各个节点之间需要远程服务调用，高性能的RPC框架必不可少，Netty作为异步高性能的通信框架，往往作为基础通信组件被这些RPC框架使用。典型的应用有：阿里分布式服务框架Dubbo底层就使用Netty进行节点间通信，Dubbo默认使用Netty作为基础通信组件，用于实现各进程节点之间的内部通信。</p><p>在游戏游戏行业，无论是手游服务端、还是大型的网络游戏，Java 语言得到了越来越广泛的应用。Netty 作为高性能的基础通信组件，它本身提供了TCP/UDP和HTTP协议栈，非常方便定制和开发私有协议栈。账号登陆服务器、地图服务器之间可以方便的通过Netty进行高性能的通信。</p><p>总的来说，Netty在实际工作中的应用大体可以分为以下三类：</p><ol><li>作为RPC框架的基础通信组件，实现RPC框架各节点之间的通信。这应该是Netty应用最多的一方面，实际底层就是基于Socket通信，来实现远程过程调用。</li><li>通过对WebSocket的支持，实现基于WebSocket协议的长连接服务器。WebSocket是一种规范，是Html5规范的一部分，可以实现在单个TCP连接上进行全双工通讯，WebSocket协议使得客户端和服务器之间的数据交换变得更加简单，允许服务端主动向客户端推送数据。Netty对WebSocket细节进行了实现，通过这种方式，就可以实现服务端主动往客户端发送消息的功能。</li><li>作为HTTP服务器。Netty支持HTTP协议，对于Netty 提供了codec编解码器支持，使得Netty客户端、服务端支持HTTP ，只需要添加相应的Http codc即可，十分简便。并支持SSL/TLS，可实现通过SSL/TLS进行安全传输。</li></ol><h1 id="Netty实现Socket客户端和服务器"><a href="#Netty实现Socket客户端和服务器" class="headerlink" title="Netty实现Socket客户端和服务器"></a>Netty实现Socket客户端和服务器</h1><p>本节主要介绍基于Netty如何实现Socket服务器和客户端，服务器示例代码如下。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> io.netty.bootstrap.ServerBootstrap;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelFuture;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.EventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.nio.NioServerSocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.logging.LogLevel;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.logging.LoggingHandler;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Eric Gui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/9/26</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSocketServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        EventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">        EventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ServerBootstrap serverBootstrap = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line">            serverBootstrap.group(bossGroup, workerGroup)</span><br><span class="line">                    .channel(NioServerSocketChannel.class)</span><br><span class="line">                    .handler(<span class="keyword">new</span> LoggingHandler(LogLevel.DEBUG))</span><br><span class="line">                    .childHandler(<span class="keyword">new</span> TestServerChannelInitializer());</span><br><span class="line">            ChannelFuture channelFuture = serverBootstrap.bind(<span class="number">8899</span>).sync();</span><br><span class="line">            channelFuture.channel().closeFuture().sync();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            workerGroup.shutdownGracefully();</span><br><span class="line">            bossGroup.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol><li>服务端首先创建两个EventLoopGroup，其中：<blockquote><p>bossGroup：用于接收客户端的连接，连接建立后，bossGroup 就不会在对其进行处理，转而交由workerGroup 处理；<br>workerGroup：真正完成客户端连接上IO数据的处理。</p></blockquote></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在了解了Netty是什么以及它的基本组件之后，我们接下来看看Netty在实际工作中如何应用。本节主要关注基于Netty如何实现Socket服务器和客户端。&lt;/p&gt;
    
    </summary>
    
      <category term="深入学习Netty" scheme="http://www.mikewoo.top/categories/%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0Netty/"/>
    
    
      <category term="TCP/IP" scheme="http://www.mikewoo.top/tags/TCP-IP/"/>
    
      <category term="Netty" scheme="http://www.mikewoo.top/tags/Netty/"/>
    
      <category term="Socket" scheme="http://www.mikewoo.top/tags/Socket/"/>
    
  </entry>
  
  <entry>
    <title>广播地址计算</title>
    <link href="http://www.mikewoo.top/2018/11/14/%E5%B9%BF%E6%92%AD%E5%9C%B0%E5%9D%80%E8%AE%A1%E7%AE%97/"/>
    <id>http://www.mikewoo.top/2018/11/14/广播地址计算/</id>
    <published>2018-11-14T02:47:02.000Z</published>
    <updated>2018-11-14T07:45:10.252Z</updated>
    
    <content type="html"><![CDATA[<p>学过计算机网络的同学都知道，IP地址是互联网上每个子网或每个主机在网络上的唯一身份标签，在设置电脑IP时，会碰到两个重要的参数，一个是IP地址，一个是子网掩码。IP地址大家很熟悉，子网掩码是什么呢，又有什么作用呢？除此之外还有广播地址，它又有什么作用呢？</p><a id="more"></a><h1 id="子网掩码介绍"><a href="#子网掩码介绍" class="headerlink" title="子网掩码介绍"></a>子网掩码介绍</h1><p>子网掩码 (subnet mask) 又叫网络掩码、地址掩码、子网络遮罩，是一个应用于 TCP/IP 网络的 32 位二进制值。它可以屏蔽掉 IP 地址中的一部分，从而分离出 IP 地址中的网络部分与主机部分，基于子网掩码，管理员可以将网络进一步划分为若干子网。它必须结合 IP 地址一起使用。</p><p>虽然我们说子网掩码可以分离出 IP 地址中的网络部分与主机部分，可大家还是会有疑问，比如为什么要区分网络地址与主机地址？区分以后又怎样呢？那么好，让我们再详细的讲一下吧！  </p><p>在使用 TCP/IP 协议的两台计算机之间进行通信时，我们通过将本机的子网掩码与接受方主机的 IP 地址进行“与”运算，即可得到目标主机所在的网络号，又由于每台主机在配置 TCP/IP 协议时都设置了一个本机 IP 地址与子网掩码，所以可以知道本机所在的网络号。</p><p>通过比较这两个网络号，就可以知道接受方主机是否在本网络上。如果网络号相同，表明接受方在本网络上，那么可以通过相关的协议把数据包直接发送到目标主机；如果网络号不同，表明目标主机在远程网络上，那么数据包将会发送给本网络上的路由器，由路由器将数据包发送到其他网络，直至到达目的地。在这个过程中你可以看到，子网掩码是不可或缺的！</p><hr><h1 id="广播地址介绍"><a href="#广播地址介绍" class="headerlink" title="广播地址介绍"></a>广播地址介绍</h1><p>广播地址(Broadcast Address)是专门用于同时向网络中所有工作站进行发送的一个地址。在使用TCP/IP 协议的网络中，主机标识段host ID 为全1 的IP 地址为广播地址，广播的分组传送给host ID段所涉及的所有计算机。如192.168.1.255就是C类地址中的一个广播地址，你将信息发送到此地址，就是将信息发送给网络号为192.168.1的所有主机。</p><hr><h1 id="已知IP地址和子网掩码求广播地址"><a href="#已知IP地址和子网掩码求广播地址" class="headerlink" title="已知IP地址和子网掩码求广播地址"></a>已知IP地址和子网掩码求广播地址</h1><p>在实际工作中，已知IP地址和子网掩码，怎么求广播地址呢？以个人云主机内网为例，IP地址为172.31.172.142，子网掩码为255.255.240.0，则本网段广播地址是多少呢？</p><h3 id="广播地址计算方法"><a href="#广播地址计算方法" class="headerlink" title="广播地址计算方法"></a>广播地址计算方法</h3><ol><li><p>把点分十进制的子网掩码地址换算成二进制<br><code>255.255.240.0   ==&gt;  1111 1111 . 1111 1111 . 1111 0000 . 0000 0000</code><br>发现子网掩码有20个连续1，所以前20位作为网络地址，后12位作为主机地址。<br>所以IP地址也可以表示为172.31.172.142/22，与IP地址和子网掩码分开表示方式等价。</p></li><li><p>把IP地址跟子网掩码取与（&amp;）得到网络地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">172.31.172.142  ==&gt;  1010 1100 . 0001 1111 . 1010 1100 . 1000 1110</span><br><span class="line">&amp;</span><br><span class="line">255.255.240.0   ==&gt;  1111 1111 . 1111 1111 . 1111 0000 . 0000 0000</span><br><span class="line">=</span><br><span class="line">172.31.160.0    ==&gt;  1010 1100 . 0001 1111 . 1010 0000 . 0000 0000</span><br></pre></td></tr></table></figure><p> 计算得到网络地址为172.31.160.0。</p></li><li><p>根据网络地址计算广播地址<br>广播地址是网络地址的主机位全1，也就是172.31.160.0的后12位全变1就是广播地址.<br><code>1010 1100 . 0001 1111 . 1010 0000 . 0000 0000</code><br>后12位全变为1，得到<br><code>1010 1100 . 0001 1111 . 1010 1111 . 1111 1111</code><br>所以计算的到该网络对应的广播地址为：<br><code>172.31.175.255</code></p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学过计算机网络的同学都知道，IP地址是互联网上每个子网或每个主机在网络上的唯一身份标签，在设置电脑IP时，会碰到两个重要的参数，一个是IP地址，一个是子网掩码。IP地址大家很熟悉，子网掩码是什么呢，又有什么作用呢？除此之外还有广播地址，它又有什么作用呢？&lt;/p&gt;
    
    </summary>
    
      <category term="网络编程" scheme="http://www.mikewoo.top/categories/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="TCP/IP" scheme="http://www.mikewoo.top/tags/TCP-IP/"/>
    
      <category term="BROADCAST" scheme="http://www.mikewoo.top/tags/BROADCAST/"/>
    
  </entry>
  
  <entry>
    <title>深入学习Netty-认识Netty</title>
    <link href="http://www.mikewoo.top/2018/09/11/%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0Netty-%E8%AE%A4%E8%AF%86Netty/"/>
    <id>http://www.mikewoo.top/2018/09/11/深入学习Netty-认识Netty/</id>
    <published>2018-09-11T07:29:46.000Z</published>
    <updated>2018-09-11T09:46:00.142Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Netty是什么"><a href="#Netty是什么" class="headerlink" title="Netty是什么"></a>Netty是什么</h1><p>Netty是由JBOSS提供的一个Java开源网络应用框架。Netty提供异步的、事件驱动的网络应用程序框架和工具，用以快速开发高性能、高可靠性的网络服务器和客户端程序。</p><a id="more"></a><p>Netty提供了一种新的方式来开发网络应用程序，这种新的方式使它很容易使用和具有很强的扩展性。Netty的内部实现是很复杂的，但是Netty封装了JDK底层BIO和NIO模型，提供了简单易用的API，同时Netty自带编解码器解决拆包粘包问题，实现了网络处理中逻辑解耦，让用户只用关心实际的业务逻辑。</p><p>Netty是完全基于NIO实现的，Netty的所有IO操作都是异步非阻塞的，通过Future-Listener机制，用户可以方便的主动获取或者通过通知机制获得IO操作结果。</p><p>Netty是当前非常流行的NIO框架，它的健壮性、高性能、可定制性以及可扩展性在同类框架都是首屈一指的。业界很多著名的开源框架都是基于Netty构建，如主流的RPC通信框架Dubbo、消息中间件RocketMQ、分布式协调服务Zookeeper、Hadoop的RPC框架Avro等等。</p><p>那么Netty的性能为什么会这么高呢？主要是因为其内部Reactor模型的实现。</p><hr><h1 id="Reactor模型"><a href="#Reactor模型" class="headerlink" title="Reactor模型"></a>Reactor模型</h1><p>Reactor设计模式是Event-Driven Drchitecture的一种实现方式，用以处理多个客户端并发的向服务端请求服务的场景。</p><h2 id="何为Reactor线程模型"><a href="#何为Reactor线程模型" class="headerlink" title="何为Reactor线程模型"></a>何为Reactor线程模型</h2><p>Reactor模式是事件驱动的，Wikipedia上说：“The reactor design pattern is an event handling pattern for handling service requests delivered concurrently by one or more inputs. The service handler then demultiplexes the incoming requests and dispatches them synchronously to associated request handlers.”。从这个描述中，我们知道Reactor模式首先是事件驱动的，有一个或多个并发输入源，有一个Service Handler，有多个Request Handlers；这个Service Handler会同步的将输入的请求（Event）多路复用的分发给相应的Request Handler。</p><p><img src="/images/20180911/reactor.png" alt="Reactor线程模型"></p><p>从结构上，这有点类似生产者消费者模式，即有一个或多个生产者将事件放入一个Queue中，而一个或多个消费者主动的从这个Queue中Poll事件来处理；而Reactor模式则并没有Queue来做缓冲，每当一个Event输入到Service Handler之后，该Service Handler会立刻的根据不同的Event类型将其分发给对应的Request Handler来处理。</p><h2 id="Netty的Reactor线程模型"><a href="#Netty的Reactor线程模型" class="headerlink" title="Netty的Reactor线程模型"></a>Netty的Reactor线程模型</h2><p>Netty的Reactor模型主要由多路复用器(Acceptor)、事件分发器(Dispatcher)、事件处理器(Handler)三部分组成，Netty中典型的实现有三种：</p><h3 id="1-单线程模型"><a href="#1-单线程模型" class="headerlink" title="1. 单线程模型"></a>1. 单线程模型</h3><p>单线程模型是最简单的Reactor模型，所有I/O操作都由一个线程完成，即多路分离套接字、Accept新连接和新连接数据处理都是在一个Reactor线程上完成的。</p><p><img src="/images/20180911/reactor_1.png" alt="Reactor单线程模型"></p><p>对于一些小容量应用场景，可以使用单线程模型。但是对于高负载、大并发的场景，由于是单线程，无法处理成百上千的连接，另外无法使用多核资源，实际中少使用。</p><h3 id="2-多线程模型"><a href="#2-多线程模型" class="headerlink" title="2. 多线程模型"></a>2. 多线程模型</h3><p>为了解决单线程模型存在的一些问题，演化出来Reactor多线程模型。</p><p><img src="/images/20180911/reactor_2.png" alt="Reactor多线程模型"></p><p>多线程模型有如下特点：</p><ul><li>有一个专门的Acceptor线程用于监听服务端，接收客户端的TCP连接请求；</li><li>所有的网络IO读写操作都是由一个专门的NIO线程池负责，将Accept新连接和事件处理分开，由这些NIO线程负责消息的读取、解码、编码和发送；</li><li>一个NIO线程可以同时处理多条链路，但是一个链路只能对应一个NIO线程，防止发生并发操作问题。</li></ul><p>在绝大多数场景下，Reactor多线程模型都可以满足性能需求；但是，在极特殊应用场景中，一个NIO线程负责监听和处理所有的客户端连接可能会存在性能问题。例如百万客户端并发连接，或者服务端需要对客户端的握手消息进行安全认证，认证本身非常损耗性能。在这类场景下，单独一个Acceptor线程可能会存在性能不足问题，为了解决性能问题，产生了第三种Reactor线程模型-主从Reactor多线程模型。</p><h3 id="3-主从多线程模型"><a href="#3-主从多线程模型" class="headerlink" title="3. 主从多线程模型"></a>3. 主从多线程模型</h3><p>主从多线程模型中接收客户端连接的不再是1个单独的NIO线程，而是一个独立的NIO线程池。Acceptor接收到客户端TCP连接请求处理完成后（可能包含接入认证等），将新创建的SocketChannel注册到I/O线程池（sub reactor线程池）的某个I/O线程上，由它负责SocketChannel的读写和编解码工作。</p><p><img src="/images/20180911/reactor_3.png" alt="Reactor主从线程模型"></p><p>通常Acceptor线程池只用于客户端的登录、握手和安全认证，一旦链路建立成功，就将链路注册到后端subReactor线程池的I/O线程上，由I/O线程负责后续的I/O操作。</p><p>第三种模型比起第二种模型，是将Reactor分成两部分，mainReactor负责监听server socket，accept新连接，并将建立的socket分派给subReactor。subReactor负责多路分离已连接的socket，读写网 络数据，对业务处理功能，其扔给worker线程池完成。通常，subReactor个数上可与CPU个数等同。</p><p>事实上，Netty的线程模型并非固定不变，在启动辅助类中创建不同的EventLoopGroup实例并通过适当的参数配置，就可以支持上述三种Reactor线程模型。正是因为Netty对Reactor线程模型的支持提供了灵活的定制能力，所以可以满足不同业务场景的性能需求。</p><hr><h1 id="Netty核心组件"><a href="#Netty核心组件" class="headerlink" title="Netty核心组件"></a>Netty核心组件</h1><p>Netty中的核心组件包括Channel、EventLoop、ChannelHandler、ChannelPipeLine、ByteBuf、Bootstrap、ServerBootstrap。</p><h2 id="Channel"><a href="#Channel" class="headerlink" title="Channel"></a>Channel</h2><p>在Netty里，Channel是通讯的载体，Channel代表一个Socker链接或者其他的IO相关组件。Channel用于完成基础的IO操作，如绑定、连接、读写等，Channel提供了一组API，极大地简化了直接与Socket进行操作的复杂性</p><h2 id="EventLoop"><a href="#EventLoop" class="headerlink" title="EventLoop"></a>EventLoop</h2><p>EventLoop是一个事件循环，可以理解为一个线程，用来处理连接的生命周期中所发生的事件，如服务端接受客户端连接的接入，处理每个已接入连接上数据流的读写。EventLoop定义了处理在连接过程中发生的事件的核心抽象，一个EventLoop可以为多个Channel服务。</p><h2 id="ChannelHandler"><a href="#ChannelHandler" class="headerlink" title="ChannelHandler"></a>ChannelHandler</h2><p>从应用开发者看来，ChannelHandler是最重要的组件，其中存放用来处理进站和出站数据的用户逻辑。ChannelHandler的方法被网络事件触发，ChannelHandler可以用于几乎任何类型的操作，如将数据从一种格式转换为另一种格式或处理抛出的异常。例如，其子接口ChannelInboundHandler，接受进站的事件和数据以便被用户定义的逻辑处理，或者当响应所连接的客户端时刷新ChannelInboundHandler的数据。</p><h2 id="ChannelPipeLine"><a href="#ChannelPipeLine" class="headerlink" title="ChannelPipeLine"></a>ChannelPipeLine</h2><p>Netty 在事件处理上，是通过ChannelPipeline来控制事件流，通过调用注册其上的一系列ChannelHandler来处理事件。ChannelPipeline为ChannelHandler链提供了一个容器并定义了用于沿着链传播入站和出站事件流的API。当创建Channel时，会自动创建一个附属的ChannelPipeline。数据可以沿着处理链进行传递。</p><h2 id="ByteBuf"><a href="#ByteBuf" class="headerlink" title="ByteBuf"></a>ByteBuf</h2><p>ByteBuf是一个存储字节的容器，是对JDK底层NIO中ByteBuffer的封装，最大特点就是使用方便，它既有自己的读索引和写索引，方便你对整段字节缓存进行读写，也支持get/set，方便你对其中每一个字节进行读写。通常有Heap Buffer、Direct Buffer、Composite Buffer三种模式。<br>其中Direct Buffer是ByteBuf中一种常用模式，它的内存分配都发生在堆外的直接内存中，免去了中间交换的内存拷贝, 提升IO处理速度。</p><h2 id="Bootstrap-和-ServerBootstrap"><a href="#Bootstrap-和-ServerBootstrap" class="headerlink" title="Bootstrap 和 ServerBootstrap"></a>Bootstrap 和 ServerBootstrap</h2><p>Bootstrap 和 ServerBootstrap是创建Netty客户端和服务端的引导辅助类，负责服务端和客户端创建以及初始化时的一些参数设置，如指定Channel类型，配置ChannelHandler等。</p><hr><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol><li><a href="https://www.jianshu.com/p/1123c9164e3e" target="_blank" rel="noopener">Netty入门简介</a></li><li><a href="https://www.jianshu.com/p/b9f3f6a16911" target="_blank" rel="noopener">Netty入门教程</a></li><li><a href="https://blog.csdn.net/summerZBH123/article/details/79344226" target="_blank" rel="noopener">Netty中的基本组件及关系</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Netty是什么&quot;&gt;&lt;a href=&quot;#Netty是什么&quot; class=&quot;headerlink&quot; title=&quot;Netty是什么&quot;&gt;&lt;/a&gt;Netty是什么&lt;/h1&gt;&lt;p&gt;Netty是由JBOSS提供的一个Java开源网络应用框架。Netty提供异步的、事件驱动的网络应用程序框架和工具，用以快速开发高性能、高可靠性的网络服务器和客户端程序。&lt;/p&gt;
    
    </summary>
    
      <category term="深入学习Netty" scheme="http://www.mikewoo.top/categories/%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0Netty/"/>
    
    
      <category term="Netty" scheme="http://www.mikewoo.top/tags/Netty/"/>
    
      <category term="NIO" scheme="http://www.mikewoo.top/tags/NIO/"/>
    
      <category term="Reactor" scheme="http://www.mikewoo.top/tags/Reactor/"/>
    
  </entry>
  
</feed>
