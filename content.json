{"meta":{"title":"指尖上的律动","subtitle":"Always on the way of programming.","description":"记录自己学习成长的点滴。","author":"明月天涯","url":"http://www.mikewoo.top"},"pages":[{"title":"about","date":"2018-08-14T03:07:14.000Z","updated":"2018-08-14T05:24:47.919Z","comments":false,"path":"about/index.html","permalink":"http://www.mikewoo.top/about/index.html","excerpt":"","text":"关于我一介书生，在编程的路上继续前行，关注微服务、大数据、机器学习领域新的潮流。 From: 明月天涯 Github: https://github.com/mikewooBlog: https://mikewoo.github.ioEmail: ahqsgmm@gmail.com"},{"title":"categories","date":"2018-08-14T03:06:56.000Z","updated":"2018-09-11T07:31:41.260Z","comments":false,"path":"categories/index.html","permalink":"http://www.mikewoo.top/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2018-08-14T03:11:33.000Z","updated":"2018-09-11T07:31:17.249Z","comments":false,"path":"tags/index.html","permalink":"http://www.mikewoo.top/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"深入学习Netty-认识Netty","slug":"深入学习Netty-认识Netty","date":"2018-09-11T07:29:46.000Z","updated":"2018-09-11T07:54:53.860Z","comments":true,"path":"2018/09/11/深入学习Netty-认识Netty/","link":"","permalink":"http://www.mikewoo.top/2018/09/11/深入学习Netty-认识Netty/","excerpt":"Netty是什么Netty是基于Java NIO的、异步的、事件驱动的网络应用框架，使用Netty可以快速开发高性能、支持高并发的网络应用，例如基于私有协议栈的服务器和客户端。","text":"Netty是什么Netty是基于Java NIO的、异步的、事件驱动的网络应用框架，使用Netty可以快速开发高性能、支持高并发的网络应用，例如基于私有协议栈的服务器和客户端。 Netty提供了一种新的方式来开发网络应用程序，这种新的方式使它很容易使用和具有很强的扩展性。Netty的内部实现是很复杂的，但是Netty提供了简单易用的API实现网络处理代码中解耦业务逻辑。 Netty是完全基于NIO实现的，Netty的所有IO操作都是异步非阻塞的，通过Future-Listener机制，用户可以方便的主动获取或者通过通知机制获得IO操作结果。 Netty是当前非常流行的NIO框架，它的健壮性、高性能、可定制性以及可扩展性在同类框架都是首屈一指的。业界很多著名的开源框架都是基于Netty构建，如主流的RPC通信框架Dubbo、消息中间件RocketMQ、分布式协调服务Zookeeper、Hadoop的RPC框架Avro等等。 那么Netty的性能为什么会这么高呢？主要是因为其内部Reactor模型的实现。 Reactor模型Reactor设计模式是Event-Driven Drchitecture的一种实现方式，用以处理多个客户端并发的向服务端请求服务的场景。 何为Reactor线程模型Reactor模式是事件驱动的，有一个或多个并发输入源，有一个Service Handler，有多个Request Handlers；这个Service Handler会同步的将输入的请求（Event）多路复用的分发给相应的Request Handler。 从结构上，这有点类似生产者消费者模式，即有一个或多个生产者将事件放入一个Queue中，而一个或多个消费者主动的从这个Queue中Poll事件来处理；而Reactor模式则并没有Queue来做缓冲，每当一个Event输入到Service Handler之后，该Service Handler会立刻的根据不同的Event类型将其分发给对应的Request Handler来处理。","categories":[{"name":"深入学习Netty","slug":"深入学习Netty","permalink":"http://www.mikewoo.top/categories/深入学习Netty/"}],"tags":[{"name":"NIO","slug":"NIO","permalink":"http://www.mikewoo.top/tags/NIO/"},{"name":"Netty","slug":"Netty","permalink":"http://www.mikewoo.top/tags/Netty/"},{"name":"Reactor","slug":"Reactor","permalink":"http://www.mikewoo.top/tags/Reactor/"}]},{"title":"Hello World","slug":"hello-world","date":"2018-08-14T02:46:25.000Z","updated":"2018-09-11T07:52:16.167Z","comments":true,"path":"2018/08/14/hello-world/","link":"","permalink":"http://www.mikewoo.top/2018/08/14/hello-world/","excerpt":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"博客搭建","slug":"博客搭建","permalink":"http://www.mikewoo.top/categories/博客搭建/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://www.mikewoo.top/tags/Hexo/"},{"name":"github","slug":"github","permalink":"http://www.mikewoo.top/tags/github/"}]}]}